{
	"info": {
		"_postman_id": "c4a7a085-9174-43f6-9278-0904b6074ab3",
		"name": "Practice_1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33738565"
	},
	"item": [
		{
			"name": "Create Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData= pm.response.json()\r",
							"pm.environment.set(\"id\", jsonData.bookingid)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var firstName=pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"console.log(firstName)\r",
							"pm.environment.set(\"firstName\",firstName)\r",
							"var lastName=pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"console.log(lastName)\r",
							"pm.environment.set(\"lastName\",lastName)\r",
							"\r",
							"var totalprice=pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"console.log(totalprice)\r",
							"pm.environment.set(\"totalprice\",totalprice)\r",
							"\r",
							"var depositepaid=pm.variables.replaceIn(\"{{$randomBoolean}}\")\r",
							"console.log(depositepaid)\r",
							"pm.environment.set(\"depositepaid\",depositepaid)\r",
							"\r",
							"const date=require('moment')\r",
							"const today=date()\r",
							"var checkIn= today.format(\"YYYY-MM-DD\")\r",
							"var checkout= today.add(5,'d').format(\"YYYY-MM-DD\")\r",
							"console.log(checkIn)\r",
							"console.log(checkout)\r",
							"pm.environment.set(\"checkin\",checkIn)\r",
							"pm.environment.set(\"checkout\",checkout)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"firstname\" : \"{{firstName}}\",\r\n\t\"lastname\" : \"{{lastName}}\",\r\n\t\"totalprice\" : {{totalprice}},\r\n\t\"depositpaid\" : {{depositepaid}},\r\n\t\"bookingdates\" : {\r\n    \t\"checkin\" : \"{{checkin}}\",\r\n    \t\"checkout\" : \"{{checkout}}\"\r\n\t},\r\n\t\"additionalneeds\" : \"Breakfast\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/booking/",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"booking",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseCode=pm.response.code\r",
							"console.log(responseCode)\r",
							"\r",
							"if(responseCode==200){\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"first name validation\", function () {\r",
							"    pm.expect(pm.environment.get(\"firstName\")).to.eql(jsonData.firstname);\r",
							"});\r",
							"\r",
							"pm.test(\"last name validation\", function () {\r",
							"    pm.expect(pm.environment.get(\"lastName\")).to.eql(jsonData.lastname);\r",
							"});\r",
							"\r",
							"pm.test(\"totalprice data validation\", function () {\r",
							"    pm.expect(pm.environment.get(\"totalprice\")).to.eql(jsonData.totalprice.toString());\r",
							"});\r",
							"\r",
							"pm.test(\"depositepaid data validation\", function () {\r",
							"    if (jsonData.depositpaid !== undefined) {\r",
							"        pm.expect(pm.environment.get(\"depositepaid\")).to.eql(jsonData.depositpaid.toString());\r",
							"    } else {\r",
							"        pm.expect(jsonData.depositpaid).to.not.be.undefined;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"checkin data validation\", function () {\r",
							"    pm.expect(pm.environment.get(\"checkin\")).to.eql(jsonData.bookingdates.checkin);\r",
							"});\r",
							"\r",
							"pm.test(\"checkout data validation\", function () {\r",
							"    pm.expect(pm.environment.get(\"checkout\")).to.eql(jsonData.bookingdates.checkout);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"}else if(responseCode==404){\r",
							"    pm.test(\"Not Found\")\r",
							"}else if(responseCode==500){\r",
							"    pm.test(\"Server Error\")\r",
							"}else{\r",
							"    pm.test(\"something went wrong\")\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/booking/{{id}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Access Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData=pm.response.json()\r",
							"pm.environment.set(\"token\", jsonData.token )"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"username\": \"admin\",\r\n\t\"password\": \"password123\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://restful-booker.herokuapp.com/auth",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Booking",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var updated_firstName=pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"console.log(updated_firstName)\r",
							"pm.environment.set(\"updated_firstName\",updated_firstName)\r",
							"var updated_lastName=pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"console.log(updated_lastName)\r",
							"pm.environment.set(\"updated_lastName\",updated_lastName)\r",
							"\r",
							"var totalprice=pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"console.log(totalprice)\r",
							"pm.environment.set(\"totalprice\",totalprice)\r",
							"\r",
							"var depositepaid=pm.variables.replaceIn(\"{{$randomBoolean}}\")\r",
							"console.log(depositepaid)\r",
							"pm.environment.set(\"depositepaid\",depositepaid)\r",
							"\r",
							"const date=require('moment')\r",
							"const today=date()\r",
							"var checkIn= today.format(\"YYYY-MM-DD\")\r",
							"var checkout= today.add(5,'d').format(\"YYYY-MM-DD\")\r",
							"console.log(checkIn)\r",
							"console.log(checkout)\r",
							"pm.environment.set(\"checkin\",checkIn)\r",
							"pm.environment.set(\"checkout\",checkout)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"firstname\" : \"sadiaa\",\r\n\t\"lastname\" : \"Sarwar\",\r\n\t\"totalprice\" : 1110,\r\n\t\"depositpaid\" : true,\r\n\t\"bookingdates\" : {\r\n    \t\"checkin\" : \"2018-01-01\",\r\n    \t\"checkout\" : \"2019-01-01\"\r\n\t},\r\n\t\"additionalneeds\" : \"Breakfast\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/booking/{{id}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Booking Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseCode=pm.response.code\r",
							"console.log(responseCode)\r",
							"\r",
							"if(responseCode==200){\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"first name validation\", function () {\r",
							"    pm.expect(pm.environment.get(\"firstName\")).to.eql(jsonData.firstname);\r",
							"});\r",
							"\r",
							"pm.test(\"last name validation\", function () {\r",
							"    pm.expect(pm.environment.get(\"lastName\")).to.eql(jsonData.lastname);\r",
							"});\r",
							"\r",
							"pm.test(\"totalprice data validation\", function () {\r",
							"    pm.expect(pm.environment.get(\"totalprice\")).to.eql(jsonData.totalprice.toString());\r",
							"});\r",
							"\r",
							"pm.test(\"depositepaid data validation\", function () {\r",
							"    if (jsonData.depositpaid !== undefined) {\r",
							"        pm.expect(pm.environment.get(\"depositepaid\")).to.eql(jsonData.depositpaid.toString());\r",
							"    } else {\r",
							"        pm.expect(jsonData.depositpaid).to.not.be.undefined;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"checkin data validation\", function () {\r",
							"    pm.expect(pm.environment.get(\"checkin\")).to.eql(jsonData.bookingdates.checkin);\r",
							"});\r",
							"\r",
							"pm.test(\"checkout data validation\", function () {\r",
							"    pm.expect(pm.environment.get(\"checkout\")).to.eql(jsonData.bookingdates.checkout);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"}else if(responseCode==404){\r",
							"    pm.test(\"Not Found\")\r",
							"}else if(responseCode==500){\r",
							"    pm.test(\"Server Error\")\r",
							"}else{\r",
							"    pm.test(\"something went wrong\")\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/booking/{{id}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Booking",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/booking/{{id}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Booking Copy 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseCode=pm.response.code\r",
							"console.log(responseCode)\r",
							"\r",
							"if(responseCode==200){\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"first name validation\", function () {\r",
							"    pm.expect(pm.environment.get(\"firstName\")).to.eql(jsonData.firstname);\r",
							"});\r",
							"\r",
							"pm.test(\"last name validation\", function () {\r",
							"    pm.expect(pm.environment.get(\"lastName\")).to.eql(jsonData.lastname);\r",
							"});\r",
							"\r",
							"pm.test(\"totalprice data validation\", function () {\r",
							"    pm.expect(pm.environment.get(\"totalprice\")).to.eql(jsonData.totalprice.toString());\r",
							"});\r",
							"\r",
							"pm.test(\"depositepaid data validation\", function () {\r",
							"    if (jsonData.depositpaid !== undefined) {\r",
							"        pm.expect(pm.environment.get(\"depositepaid\")).to.eql(jsonData.depositpaid.toString());\r",
							"    } else {\r",
							"        pm.expect(jsonData.depositpaid).to.not.be.undefined;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"checkin data validation\", function () {\r",
							"    pm.expect(pm.environment.get(\"checkin\")).to.eql(jsonData.bookingdates.checkin);\r",
							"});\r",
							"\r",
							"pm.test(\"checkout data validation\", function () {\r",
							"    pm.expect(pm.environment.get(\"checkout\")).to.eql(jsonData.bookingdates.checkout);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"}else if(responseCode==404){\r",
							"    pm.test(\"Not Found\")\r",
							"}else if(responseCode==500){\r",
							"    pm.test(\"Server Error\")\r",
							"}else{\r",
							"    pm.test(\"something went wrong\")\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/booking/{{id}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	]
}